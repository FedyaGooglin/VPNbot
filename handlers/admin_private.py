from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.ext.asyncio import AsyncSession
import uuid

from common.vpn_utils import get_connetion_string
from database.orm_query import orm_add_key, orm_get_user_id, orm_check_key_limit, orm_sync_free_keys_from_panel
from filters.chat_types import ChatTypeFilter, IsAdmin
from kbds.reply import get_keyboard
from x_ui_api import add_user, api, safe_api_call, api_inbound_info, api_toggle_user, api_get_user

admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


@admin_router.message(F.text == "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π")
async def sync_free_keys(message: types.Message, session: AsyncSession):
    added, updated = await orm_sync_free_keys_from_panel(session)
    await message.answer(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:{added} –¥–æ–±–∞–≤–ª–µ–Ω–æ, {updated} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

ADMIN_KB = get_keyboard(
    "–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á",
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω",
    "–ü–æ–ª—É—á–∏—Ç—å IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏?",
    "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π",
    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",

    placeholder="–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞",
    sizes=(2,)

)


class ApiAddUser(StatesGroup):
    name = State()


# –ü–µ—Ä–µ–≤–æ–¥ –≤ –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ-–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@admin_router.message(StateFilter(None), F.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á")
async def api_add_user(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª—é—á–∞.", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(ApiAddUser.name)


@admin_router.message(ApiAddUser.name)
async def add_name(message: types.Message, state: FSMContext, session: AsyncSession):
    await message.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ...")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª—é—á–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(name=message.text)
    data = await state.get_data()
    key_name = data["name"]

    # –ü–æ–ª—É—á–∞–µ–º inbound –æ–±—ä–µ–∫—Ç –ø–æ ID
    inbound = await api.inbound.get_by_id(1)

    # –ü–æ–ª—É—á–∞–µ–º user.id –∏–∑ –±–∞–∑—ã –ø–æ telegram_id
    user_tg_id = message.from_user.id
    user_db_id = await orm_get_user_id(session, user_tg_id)
    if await orm_check_key_limit(session, user_tg_id):
        await message.answer("‚ùó –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∫–ª—é—á–µ–π. –£–¥–∞–ª–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        await state.clear()
        return

    # –°–æ–∑–¥–∞—ë–º VPN-–∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–∞–Ω–µ–ª–∏
    key = await safe_api_call("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞", add_user(key_name))
    if not key:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ \n –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∫–ª—é—á —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å.")
        await state.clear()
        return
    key_uuid = uuid.UUID(key.id)
    key_name = key_uuid.hex[:8] + key_name
    config_string = get_connetion_string(inbound, key.id, key_name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await orm_add_key(session, user_db_id, key_name, config_string)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"‚úÖ –ö–ª—é—á <b>{key_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n<code>{config_string}</code>",
        parse_mode="HTML"
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()


@admin_router.message(F.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω" )

@admin_router.message(Command("admin"))
async def admin_kb(message: types.Message):
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.", reply_markup=ADMIN_KB)


@admin_router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: types.Message):
    await message.answer(
        'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=get_keyboard(
            "üìä –ü—Ä–æ—Ñ–∏–ª—å",
            "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
            placeholder="WELCOME",
        )
    )
