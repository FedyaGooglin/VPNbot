from aiogram import F, types, Router
from aiogram.filters import CommandStart
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import orm_add_user, orm_get_user_keys
from filters.chat_types import ChatTypeFilter
from kbds.reply import get_keyboard

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message, session: AsyncSession):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –±–∞–∑–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = message.from_user
    await orm_add_user(
        session,
        telegram_id=user.id,
        name=user.first_name

    )
    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} (@{message.from_user.username})! üëã\n\n"
        f"–¢—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ VPN-–±–æ—Ç–∞ <b>T:AYK</b>.\n\n"
        f"–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã:\n\n"
        f"üîë <b>–ö–æ–º–∞–Ω–¥–∞ /admin</b> ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å:\n"
        f"‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–∏ (VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ª–∏–º–∏—Ç 3 —à—Ç—É–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.)\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏\n"
        f"‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
        f"üè† –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É <b>¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª</b>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
        f"üí¨ –ï—Å–ª–∏ –Ω–∞–π–¥—ë—à—å –æ—à–∏–±–∫—É –∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî —Å—Ä–∞–∑—É —Å–æ–æ–±—â–∏!\n",
        parse_mode="HTML",
        reply_markup=get_keyboard(
            "üìä –ü—Ä–æ—Ñ–∏–ª—å",
            "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
            placeholder="WELCOME",
        )
    )


@user_private_router.message(F.text == "üìä –ü—Ä–æ—Ñ–∏–ª—å")
async def user_profile(message: types.Message, session: AsyncSession):
    user_tg_id = message.from_user.id

    user_keys = await orm_get_user_keys(session, user_tg_id)
    # if not user_keys:
    #     await message.answer('–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
    #     return

    keys_count = len(user_keys)

    profile_text = (
        f"üìá <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üë§ –ò–º—è: <b>{message.from_user.first_name or '‚Äî'}</b>\n"
        f"üÜî Telegram ID: <code>{message.from_user.id}</code>\n"
        f"üîê –ö–æ–ª-–≤–æ –∫–ª—é—á–µ–π: <b>{keys_count}</b>\n"
    )

    reply_kb = get_keyboard(
        "üîë –ú–æ–∏ –∫–ª—é—á–∏",
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        sizes=(2,)
    )
    await message.answer(profile_text, parse_mode="HTML", reply_markup=reply_kb)


@user_private_router.message(F.text == "üîë –ú–æ–∏ –∫–ª—é—á–∏")
async def user_keys_list(message: types.Message, session: AsyncSession):
    user_tg_id = message.from_user.id

    user_keys = await orm_get_user_keys(session, user_tg_id)
    if not user_keys:
        await message.answer('–£ –í–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞.')
        return

    for key in user_keys[:3]:
        text = (
            f"üîê <b>–ò–º—è –∫–ª—é—á–∞:</b> <code>{key.name}</code>\n"
            f"üîó <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n<code>{key.config}</code>"
        )
        await message.answer(text, parse_mode="HTML")

#TODO –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—É—Ç –∏ –≤ –∞–¥–º–∏–Ω–∫–µ
@user_private_router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: types.Message):
    await message.answer(
        'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=get_keyboard(
            "üìä –ü—Ä–æ—Ñ–∏–ª—å",
            "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
            placeholder="WELCOME",
        )
    )
